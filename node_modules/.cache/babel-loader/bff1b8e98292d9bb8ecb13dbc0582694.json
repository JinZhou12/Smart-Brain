{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jinzhou/Desktop/coding/Web Dev/Smart-Brain/Smart-Brain-Front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/jinzhou/Desktop/coding/Web Dev/Smart-Brain/Smart-Brain-Front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/jinzhou/Desktop/coding/Web Dev/Smart-Brain/Smart-Brain-Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/jinzhou/Desktop/coding/Web Dev/Smart-Brain/Smart-Brain-Front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jinzhou/Desktop/coding/Web Dev/Smart-Brain/Smart-Brain-Front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport var validTypes = [\"text\", \"character\", \"char\"];\nexport var TextDrawer = /*#__PURE__*/function () {\n  function TextDrawer() {\n    _classCallCheck(this, TextDrawer);\n  }\n\n  _createClass(TextDrawer, [{\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a, _b, _c;\n\n      var character = particle.shapeData;\n\n      if (character === undefined) {\n        return;\n      }\n\n      var textData = character.value;\n\n      if (textData === undefined) {\n        return;\n      }\n\n      var textParticle = particle;\n\n      if (textParticle.text === undefined) {\n        textParticle.text = textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n      }\n\n      var text = textParticle.text,\n          style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\",\n          weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\",\n          size = Math.round(radius) * 2,\n          font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\",\n          fill = particle.fill,\n          offsetX = text.length * radius / 2;\n      context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n      var pos = {\n        x: -offsetX,\n        y: radius / 2\n      };\n      context.globalAlpha = opacity;\n\n      if (fill) {\n        context.fillText(text, pos.x, pos.y);\n      } else {\n        context.strokeText(text, pos.x, pos.y);\n      }\n\n      context.globalAlpha = 1;\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(container) {\n        var options, shapeOptions, promises, _iterator, _step, character, charShape, _charShape;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = container.actualOptions;\n\n                if (!validTypes.find(function (t) {\n                  return isInArray(t, options.particles.shape.type);\n                })) {\n                  _context.next = 15;\n                  break;\n                }\n\n                shapeOptions = validTypes.map(function (t) {\n                  return options.particles.shape.options[t];\n                }).find(function (t) {\n                  return !!t;\n                });\n\n                if (!(shapeOptions instanceof Array)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                promises = [];\n                _iterator = _createForOfIteratorHelper(shapeOptions);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    character = _step.value;\n                    charShape = character;\n                    promises.push(loadFont(charShape.font, charShape.weight));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _context.next = 9;\n                return Promise.allSettled(promises);\n\n              case 9:\n                _context.next = 15;\n                break;\n\n              case 11:\n                if (!(shapeOptions !== undefined)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _charShape = shapeOptions;\n                _context.next = 15;\n                return loadFont(_charShape.font, _charShape.weight);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }]);\n\n  return TextDrawer;\n}();","map":{"version":3,"names":["isInArray","itemFromArray","loadFont","validTypes","TextDrawer","context","particle","radius","opacity","_a","_b","_c","character","shapeData","undefined","textData","value","textParticle","text","Array","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","charShape","push","Promise","allSettled"],"sources":["/Users/jinzhou/Desktop/coding/Web Dev/Smart-Brain/Smart-Brain-Front/node_modules/tsparticles-shape-text/esm/TextDrawer.js"],"sourcesContent":["import { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        var _a, _b, _c;\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        const textParticle = particle;\n        if (textParticle.text === undefined) {\n            textParticle.text =\n                textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n        }\n        const text = textParticle.text, style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\", weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\", size = Math.round(radius) * 2, font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t);\n            if (shapeOptions instanceof Array) {\n                const promises = [];\n                for (const character of shapeOptions) {\n                    const charShape = character;\n                    promises.push(loadFont(charShape.font, charShape.weight));\n                }\n                await Promise.allSettled(promises);\n            }\n            else {\n                if (shapeOptions !== undefined) {\n                    const charShape = shapeOptions;\n                    await loadFont(charShape.font, charShape.weight);\n                }\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}